// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agents_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_agents_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_agents_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_agents_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_agents_5fstore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agents_5fstore_2eproto;
namespace cohorts {
class AgentElement;
class AgentElementDefaultTypeInternal;
extern AgentElementDefaultTypeInternal _AgentElement_default_instance_;
class AgentStore;
class AgentStoreDefaultTypeInternal;
extern AgentStoreDefaultTypeInternal _AgentStore_default_instance_;
}  // namespace cohorts
PROTOBUF_NAMESPACE_OPEN
template<> ::cohorts::AgentElement* Arena::CreateMaybeMessage<::cohorts::AgentElement>(Arena*);
template<> ::cohorts::AgentStore* Arena::CreateMaybeMessage<::cohorts::AgentStore>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cohorts {

// ===================================================================

class AgentElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cohorts.AgentElement) */ {
 public:
  inline AgentElement() : AgentElement(nullptr) {}
  virtual ~AgentElement();

  AgentElement(const AgentElement& from);
  AgentElement(AgentElement&& from) noexcept
    : AgentElement() {
    *this = ::std::move(from);
  }

  inline AgentElement& operator=(const AgentElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentElement& operator=(AgentElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentElement* internal_default_instance() {
    return reinterpret_cast<const AgentElement*>(
               &_AgentElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AgentElement& a, AgentElement& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentElement* New() const final {
    return CreateMaybeMessage<AgentElement>(nullptr);
  }

  AgentElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentElement& from);
  void MergeFrom(const AgentElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cohorts.AgentElement";
  }
  protected:
  explicit AgentElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agents_5fstore_2eproto);
    return ::descriptor_table_agents_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfectionStatusFieldNumber = 1,
    kEnteredSymptomaticStateFieldNumber = 2,
    kEnteredHospitalisedStateFieldNumber = 3,
    kInfectiveFieldNumber = 5,
    kStateBeforeRecoveryFieldNumber = 4,
    kDiseaseLabelFieldNumber = 6,
    kTimeOfInfectionFieldNumber = 7,
    kTimeBecameInfectiveFieldNumber = 8,
  };
  // required int32 infection_status = 1;
  bool has_infection_status() const;
  private:
  bool _internal_has_infection_status() const;
  public:
  void clear_infection_status();
  ::PROTOBUF_NAMESPACE_ID::int32 infection_status() const;
  void set_infection_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_infection_status() const;
  void _internal_set_infection_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool entered_symptomatic_state = 2;
  bool has_entered_symptomatic_state() const;
  private:
  bool _internal_has_entered_symptomatic_state() const;
  public:
  void clear_entered_symptomatic_state();
  bool entered_symptomatic_state() const;
  void set_entered_symptomatic_state(bool value);
  private:
  bool _internal_entered_symptomatic_state() const;
  void _internal_set_entered_symptomatic_state(bool value);
  public:

  // required bool entered_hospitalised_state = 3;
  bool has_entered_hospitalised_state() const;
  private:
  bool _internal_has_entered_hospitalised_state() const;
  public:
  void clear_entered_hospitalised_state();
  bool entered_hospitalised_state() const;
  void set_entered_hospitalised_state(bool value);
  private:
  bool _internal_entered_hospitalised_state() const;
  void _internal_set_entered_hospitalised_state(bool value);
  public:

  // required bool infective = 5;
  bool has_infective() const;
  private:
  bool _internal_has_infective() const;
  public:
  void clear_infective();
  bool infective() const;
  void set_infective(bool value);
  private:
  bool _internal_infective() const;
  void _internal_set_infective(bool value);
  public:

  // required int32 state_before_recovery = 4;
  bool has_state_before_recovery() const;
  private:
  bool _internal_has_state_before_recovery() const;
  public:
  void clear_state_before_recovery();
  ::PROTOBUF_NAMESPACE_ID::int32 state_before_recovery() const;
  void set_state_before_recovery(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state_before_recovery() const;
  void _internal_set_state_before_recovery(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 disease_label = 6;
  bool has_disease_label() const;
  private:
  bool _internal_has_disease_label() const;
  public:
  void clear_disease_label();
  ::PROTOBUF_NAMESPACE_ID::int32 disease_label() const;
  void set_disease_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_disease_label() const;
  void _internal_set_disease_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 time_of_infection = 7;
  bool has_time_of_infection() const;
  private:
  bool _internal_has_time_of_infection() const;
  public:
  void clear_time_of_infection();
  ::PROTOBUF_NAMESPACE_ID::int32 time_of_infection() const;
  void set_time_of_infection(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_of_infection() const;
  void _internal_set_time_of_infection(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 time_became_infective = 8;
  bool has_time_became_infective() const;
  private:
  bool _internal_has_time_became_infective() const;
  public:
  void clear_time_became_infective();
  ::PROTOBUF_NAMESPACE_ID::int32 time_became_infective() const;
  void set_time_became_infective(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_became_infective() const;
  void _internal_set_time_became_infective(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cohorts.AgentElement)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 infection_status_;
  bool entered_symptomatic_state_;
  bool entered_hospitalised_state_;
  bool infective_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_before_recovery_;
  ::PROTOBUF_NAMESPACE_ID::int32 disease_label_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_of_infection_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_became_infective_;
  friend struct ::TableStruct_agents_5fstore_2eproto;
};
// -------------------------------------------------------------------

class AgentStore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cohorts.AgentStore) */ {
 public:
  inline AgentStore() : AgentStore(nullptr) {}
  virtual ~AgentStore();

  AgentStore(const AgentStore& from);
  AgentStore(AgentStore&& from) noexcept
    : AgentStore() {
    *this = ::std::move(from);
  }

  inline AgentStore& operator=(const AgentStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentStore& operator=(AgentStore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentStore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentStore* internal_default_instance() {
    return reinterpret_cast<const AgentStore*>(
               &_AgentStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AgentStore& a, AgentStore& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentStore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentStore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentStore* New() const final {
    return CreateMaybeMessage<AgentStore>(nullptr);
  }

  AgentStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentStore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentStore& from);
  void MergeFrom(const AgentStore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentStore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cohorts.AgentStore";
  }
  protected:
  explicit AgentStore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agents_5fstore_2eproto);
    return ::descriptor_table_agents_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
  };
  // repeated .cohorts.AgentElement agents = 1;
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::cohorts::AgentElement* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cohorts::AgentElement >*
      mutable_agents();
  private:
  const ::cohorts::AgentElement& _internal_agents(int index) const;
  ::cohorts::AgentElement* _internal_add_agents();
  public:
  const ::cohorts::AgentElement& agents(int index) const;
  ::cohorts::AgentElement* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cohorts::AgentElement >&
      agents() const;

  // @@protoc_insertion_point(class_scope:cohorts.AgentStore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cohorts::AgentElement > agents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agents_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AgentElement

// required int32 infection_status = 1;
inline bool AgentElement::_internal_has_infection_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AgentElement::has_infection_status() const {
  return _internal_has_infection_status();
}
inline void AgentElement::clear_infection_status() {
  infection_status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::_internal_infection_status() const {
  return infection_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::infection_status() const {
  // @@protoc_insertion_point(field_get:cohorts.AgentElement.infection_status)
  return _internal_infection_status();
}
inline void AgentElement::_internal_set_infection_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  infection_status_ = value;
}
inline void AgentElement::set_infection_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_infection_status(value);
  // @@protoc_insertion_point(field_set:cohorts.AgentElement.infection_status)
}

// required bool entered_symptomatic_state = 2;
inline bool AgentElement::_internal_has_entered_symptomatic_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AgentElement::has_entered_symptomatic_state() const {
  return _internal_has_entered_symptomatic_state();
}
inline void AgentElement::clear_entered_symptomatic_state() {
  entered_symptomatic_state_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AgentElement::_internal_entered_symptomatic_state() const {
  return entered_symptomatic_state_;
}
inline bool AgentElement::entered_symptomatic_state() const {
  // @@protoc_insertion_point(field_get:cohorts.AgentElement.entered_symptomatic_state)
  return _internal_entered_symptomatic_state();
}
inline void AgentElement::_internal_set_entered_symptomatic_state(bool value) {
  _has_bits_[0] |= 0x00000002u;
  entered_symptomatic_state_ = value;
}
inline void AgentElement::set_entered_symptomatic_state(bool value) {
  _internal_set_entered_symptomatic_state(value);
  // @@protoc_insertion_point(field_set:cohorts.AgentElement.entered_symptomatic_state)
}

// required bool entered_hospitalised_state = 3;
inline bool AgentElement::_internal_has_entered_hospitalised_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AgentElement::has_entered_hospitalised_state() const {
  return _internal_has_entered_hospitalised_state();
}
inline void AgentElement::clear_entered_hospitalised_state() {
  entered_hospitalised_state_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AgentElement::_internal_entered_hospitalised_state() const {
  return entered_hospitalised_state_;
}
inline bool AgentElement::entered_hospitalised_state() const {
  // @@protoc_insertion_point(field_get:cohorts.AgentElement.entered_hospitalised_state)
  return _internal_entered_hospitalised_state();
}
inline void AgentElement::_internal_set_entered_hospitalised_state(bool value) {
  _has_bits_[0] |= 0x00000004u;
  entered_hospitalised_state_ = value;
}
inline void AgentElement::set_entered_hospitalised_state(bool value) {
  _internal_set_entered_hospitalised_state(value);
  // @@protoc_insertion_point(field_set:cohorts.AgentElement.entered_hospitalised_state)
}

// required int32 state_before_recovery = 4;
inline bool AgentElement::_internal_has_state_before_recovery() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AgentElement::has_state_before_recovery() const {
  return _internal_has_state_before_recovery();
}
inline void AgentElement::clear_state_before_recovery() {
  state_before_recovery_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::_internal_state_before_recovery() const {
  return state_before_recovery_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::state_before_recovery() const {
  // @@protoc_insertion_point(field_get:cohorts.AgentElement.state_before_recovery)
  return _internal_state_before_recovery();
}
inline void AgentElement::_internal_set_state_before_recovery(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  state_before_recovery_ = value;
}
inline void AgentElement::set_state_before_recovery(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state_before_recovery(value);
  // @@protoc_insertion_point(field_set:cohorts.AgentElement.state_before_recovery)
}

// required bool infective = 5;
inline bool AgentElement::_internal_has_infective() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AgentElement::has_infective() const {
  return _internal_has_infective();
}
inline void AgentElement::clear_infective() {
  infective_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AgentElement::_internal_infective() const {
  return infective_;
}
inline bool AgentElement::infective() const {
  // @@protoc_insertion_point(field_get:cohorts.AgentElement.infective)
  return _internal_infective();
}
inline void AgentElement::_internal_set_infective(bool value) {
  _has_bits_[0] |= 0x00000008u;
  infective_ = value;
}
inline void AgentElement::set_infective(bool value) {
  _internal_set_infective(value);
  // @@protoc_insertion_point(field_set:cohorts.AgentElement.infective)
}

// required int32 disease_label = 6;
inline bool AgentElement::_internal_has_disease_label() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AgentElement::has_disease_label() const {
  return _internal_has_disease_label();
}
inline void AgentElement::clear_disease_label() {
  disease_label_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::_internal_disease_label() const {
  return disease_label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::disease_label() const {
  // @@protoc_insertion_point(field_get:cohorts.AgentElement.disease_label)
  return _internal_disease_label();
}
inline void AgentElement::_internal_set_disease_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  disease_label_ = value;
}
inline void AgentElement::set_disease_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_disease_label(value);
  // @@protoc_insertion_point(field_set:cohorts.AgentElement.disease_label)
}

// required int32 time_of_infection = 7;
inline bool AgentElement::_internal_has_time_of_infection() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AgentElement::has_time_of_infection() const {
  return _internal_has_time_of_infection();
}
inline void AgentElement::clear_time_of_infection() {
  time_of_infection_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::_internal_time_of_infection() const {
  return time_of_infection_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::time_of_infection() const {
  // @@protoc_insertion_point(field_get:cohorts.AgentElement.time_of_infection)
  return _internal_time_of_infection();
}
inline void AgentElement::_internal_set_time_of_infection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  time_of_infection_ = value;
}
inline void AgentElement::set_time_of_infection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_of_infection(value);
  // @@protoc_insertion_point(field_set:cohorts.AgentElement.time_of_infection)
}

// required int32 time_became_infective = 8;
inline bool AgentElement::_internal_has_time_became_infective() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AgentElement::has_time_became_infective() const {
  return _internal_has_time_became_infective();
}
inline void AgentElement::clear_time_became_infective() {
  time_became_infective_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::_internal_time_became_infective() const {
  return time_became_infective_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgentElement::time_became_infective() const {
  // @@protoc_insertion_point(field_get:cohorts.AgentElement.time_became_infective)
  return _internal_time_became_infective();
}
inline void AgentElement::_internal_set_time_became_infective(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  time_became_infective_ = value;
}
inline void AgentElement::set_time_became_infective(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_became_infective(value);
  // @@protoc_insertion_point(field_set:cohorts.AgentElement.time_became_infective)
}

// -------------------------------------------------------------------

// AgentStore

// repeated .cohorts.AgentElement agents = 1;
inline int AgentStore::_internal_agents_size() const {
  return agents_.size();
}
inline int AgentStore::agents_size() const {
  return _internal_agents_size();
}
inline void AgentStore::clear_agents() {
  agents_.Clear();
}
inline ::cohorts::AgentElement* AgentStore::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:cohorts.AgentStore.agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cohorts::AgentElement >*
AgentStore::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:cohorts.AgentStore.agents)
  return &agents_;
}
inline const ::cohorts::AgentElement& AgentStore::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::cohorts::AgentElement& AgentStore::agents(int index) const {
  // @@protoc_insertion_point(field_get:cohorts.AgentStore.agents)
  return _internal_agents(index);
}
inline ::cohorts::AgentElement* AgentStore::_internal_add_agents() {
  return agents_.Add();
}
inline ::cohorts::AgentElement* AgentStore::add_agents() {
  // @@protoc_insertion_point(field_add:cohorts.AgentStore.agents)
  return _internal_add_agents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cohorts::AgentElement >&
AgentStore::agents() const {
  // @@protoc_insertion_point(field_list:cohorts.AgentStore.agents)
  return agents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cohorts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_agents_5fstore_2eproto
